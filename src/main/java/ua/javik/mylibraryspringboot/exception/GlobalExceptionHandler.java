package ua.javik.mylibraryspringboot.exception;

import com.fasterxml.jackson.annotation.JsonInclude;
import jakarta.persistence.EntityNotFoundException;
import lombok.AllArgsConstructor;
import lombok.Getter;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashSet;
import java.util.Set;
/**
    –ß–æ–º—É –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å ResponseEntity.status(...).body(...)?
    ‚úî 1. –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ (builder-style API)

–¶–µ–π –ø—ñ–¥—Ö—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ status(...) —è–∫ —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ResponseEntity. –í—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–º—ñ–∂–Ω–∏–π –æ–±‚Äô—î–∫—Ç (—Ç–∏–ø—É BodyBuilder), –Ω–∞ —è–∫–æ–º—É —Ç–∏ –º–æ–∂–µ—à –∑—Ä—É—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ .body(...).

–ü–µ—Ä–µ–≤–∞–≥–∞:
‚Ä¢	–õ–µ–≥—à–µ —á–∏—Ç–∞—Ç–∏
‚Ä¢	–ú–µ–Ω—à–µ —Ä–∏–∑–∏–∫—É –∑—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É
‚Ä¢	–í–∏–≥–ª—è–¥–∞—î —è–∫ DSL (Domain-Specific Language)

‚úî 2. –ú–µ—Ç–æ–¥ body(...) –ø—ñ–¥ –∫–∞–ø–æ—Ç–æ–º –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä

–¢–∞–∫, —è–∫ —Ç–∏ –ø—ñ–¥–æ–∑—Ä—é—î—à, –º–µ—Ç–æ–¥ body(...) –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –≤–∏–∫–ª–∏–∫–∞—î —Ç–æ–π —Å–∞–º–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —è–∫–∏–π —Ç–∏ –º–æ–∂–µ—à –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ:
–¶–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∞–ª—ñ–¥–Ω–æ. –û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤–æ, —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –æ–¥–∏–Ω —ñ —Ç–æ–π –∂–µ.

‚∏ª

üîç –¢–æ –≤ —á–æ–º—É —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–≤–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏?
üìå –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
return ResponseEntity
    .status(HttpStatus.BAD_REQUEST)
    .header("X-Error-Code", "400123")
    .contentType(MediaType.APPLICATION_JSON)
    .body(errorResponse);
    –¢–∞–∫–µ –∑—Ä–æ–±–∏—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ–∑—Ä—É—á–Ω–æ.

‚∏ª

üîö –í–∏—Å–Ω–æ–≤–æ–∫
‚Ä¢	–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ
‚Ä¢	.status().body() ‚Äî —Ü–µ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∏–ª—ñ
‚Ä¢	–Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å —à–≤–∏–¥–∫–æ —ñ –ø—Ä–æ—Å—Ç–æ ‚Äî –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ new ResponseEntity<>(...)
‚Ä¢	–Ø–∫—â–æ –∂ –ø–æ—Ç—Ä—ñ–±–µ–Ω –≥–Ω—É—á–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å (headers, contentType —Ç–æ—â–æ), –∫—Ä–∞—â–µ .status().body(...)
     */
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(IllegalArgumentException.class)
    protected ResponseEntity<Object> handleIllegalArgumentException(IllegalArgumentException e) {
        return buildErrorResponse(HttpStatus.BAD_REQUEST, e.getMessage());
    }
    @ExceptionHandler(NotFoundException.class)
    protected ResponseEntity<Object> handleNoFoundException(NotFoundException e) {
        return buildErrorResponse(HttpStatus.BAD_REQUEST, e.getMessage());

    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    protected ResponseEntity<Object> handleValidationException(MethodArgumentNotValidException ex) {
        Set<String> errorSet = new HashSet<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String errorMessage = error.getDefaultMessage();
            errorSet.add(errorMessage);
        });

        return buildErrorResponse(HttpStatus.BAD_REQUEST, ex.getMessage());
    }

    private static ResponseEntity<Object> buildErrorResponse(HttpStatus httpStatus, String message) {
        ErrorResponse errorResponse = new ErrorResponse(httpStatus.value(), httpStatus.getReasonPhrase(), message);
        return ResponseEntity.status(httpStatus.value()).body(errorResponse);
    }
    private static ResponseEntity<Object> buildArrayErrorResponse(String[] message) {
        ErrorArrayResponse errorArrayResponse = new ErrorArrayResponse(
                HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), message);
        return ResponseEntity.status(HttpStatus.BAD_REQUEST.value()).body(errorArrayResponse);
    }


    @AllArgsConstructor
    @Getter
    @JsonInclude(JsonInclude.Include.NON_NULL)
    static class ErrorResponse {

        private int status;
        private String error;
        private String massage;
    }

    @AllArgsConstructor
    @Getter
    @JsonInclude(JsonInclude.Include.NON_NULL)
    static class ErrorArrayResponse {

        private int status;
        private String error;
        private String[] massage;
    }
}
